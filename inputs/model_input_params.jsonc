// ========================================================================
// ==  CONFIG FOR A NEURAL ODE SOLVER (MLP/SIREN) HYPERPARAMETER TUNING  ==
// ========================================================================
//
// This configuration supports both the bug-fixed MLP and the new, superior
// SIREN architecture for learning the mapping from initial conditions to
// the state at a future time `t`.
//
{
  // ════════════════════════════════════════════════════════════════
  // DATA AND OUTPUT PATHS CONFIGURATION
  // ════════════════════════════════════════════════════════════════
  "data_paths_config": {
    "raw_profiles_foldername": "clean_xi_profiles",
    "normalized_profiles_foldername": "clean_profiles_normalized_xi"
  },
  "output_paths_config": {
    "fixed_model_foldername": "trained_model",
    "tuning_results_foldername": "tuning_runs"
  },

  // ════════════════════════════════════════════════════════════════
  // DATA SPECIFICATION
  // ════════════════════════════════════════════════════════════════
  "species_variables": [
      "C2H2_evolution", "CH4_evolution", "CO2_evolution", "CO_evolution",
      "H2O_evolution", "H2_evolution", "HCN_evolution", "H_evolution",
      "N2_evolution", "NH3_evolution", "OH_evolution", "O_evolution"
  ],
  "global_variables": ["P", "T"],
  "all_variables": [
      "P", "T", "t_time", "C2H2_evolution", "CH4_evolution", "CO2_evolution",
      "CO_evolution", "H2O_evolution", "H2_evolution", "HCN_evolution", "H_evolution",
      "N2_evolution", "NH3_evolution", "OH_evolution", "O_evolution"
  ],
  "normalization": {
    "key_methods": {
        "T": "standard", 
        "t_time": "log-min-max"
    },
    "default_method": "log-standard",
    "epsilon": 1e-30
  },

  // ════════════════════════════════════════════════════════════════
  // BASE PARAMETERS (Defaults for a --train run, will be overridden by Optuna)
  // ════════════════════════════════════════════════════════════════
  "model_type": "siren",
  "hidden_dims": [256, 512, 512, 256],
  "dropout": 0.00,
  "use_time_embedding": true,
  "time_embedding_dim": 64,
  "use_residual": true,
  "siren_w0_initial": 30.0,
  "siren_w0_hidden": 10.0,
  "output_activation": "identity",
  "batch_size": 1024,
  "epochs": 200,
  "learning_rate": 5e-4,
  "weight_decay": 1e-6,
  "gradient_clip_val": 1.0,
  "loss_function": "huber",
  "huber_delta": 0.1,
  "optimizer": "adamw",
  "scheduler_choice": "cosine",
  "lr_patience": 15,
  "lr_factor": 0.5,
  "cosine_T_0": 25,
  "min_delta": 1e-7,
  "early_stopping_patience": 30,

  // ════════════════════════════════════════════════════════════════
  // OPTUNA HYPERPARAMETER SEARCH SETTINGS
  // ════════════════════════════════════════════════════════════════
  "optuna_settings": {
    "study_name": "hyperparm-search",
    "num_trials": 300
  },
  
  "optuna_hyperparam_search_space": {
    // --- Architecture (Applies to both MLP and SIREN) ---
    "architecture": {
        "num_hidden_layers": {"type": "int", "low": 2, "high": 8},
        "hidden_dim": {"type": "categorical", "choices": [64, 256, 512]}
    },
    
    // --- Generic Hyperparameters (Dynamically processed) ---
    "hyperparameters": {
        "model_type": {"type": "categorical", "choices": ["siren", "mlp"]},
        "dropout": {"type": "float", "low": 0.0, "high": 0.1},
        //"learning_rate": {"type": "float", "low": 1e-4, "high": 2e-3, "log": true},
        //"weight_decay": {"type": "float", "low": 1e-7, "high": 5e-5, "log": true},
        //"loss_function": {"type": "categorical", "choices": ["huber", "mse"]},
        //"optimizer": {"type": "categorical", "choices": ["adamw"]},
        //"scheduler_choice": {"type": "categorical", "choices": ["cosine", "plateau"]},
        "siren_w0_initial": {"type": "float", "low": 10.0, "high": 50.0},
        "siren_w0_hidden": {"type": "categorical", "choices": [1.0, 5.0, 10.0, 30.0]}
    },

    // --- Conditional Hyperparameters (Handled by hyperparams.py) ---
    "conditional_hyperparameters": {
        "time_embedding_dim": {"type": "categorical", "choices": [16, 64, 128]},
        //"huber_delta": {"type": "float", "low": 0.05, "high": 0.2},
        //"lr_patience": {"type": "int", "low": 8, "high": 20},
        //"lr_factor": {"type": "float", "low": 0.1, "high": 0.5},
        //"cosine_T_0": {"type": "int", "low": 15, "high": 40}
    }
  },

  // ════════════════════════════════════════════════════════════════
  // SYSTEM & DATA SPLIT SETTINGS
  // ════════════════════════════════════════════════════════════════
  "val_frac": 0.15,
  "test_frac": 0.15,
  "random_seed": 42,
  "use_torch_compile": true,
  "show_epoch_progress": true
}